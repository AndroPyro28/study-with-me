// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id        Int        @id @unique @default(autoincrement())
    email     String     @unique
    username  String     @unique
    password  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    profile   Profile?
    Reviewer  Reviewer[]
    Event     Event[]
    Quiz      Quiz[]
    Question  Question[]
    Answer    Answer[]

    @@map("users")
}

model Profile {
    id        Int     @id @default(autoincrement())
    firstname String
    lastname  String
    imageUrl  String?
    user      User    @relation(fields: [userId], references: [id])
    userId    Int     @unique

    @@map("profiles")
}

model Reviewer {
    id         String   @id @default(cuid())
    title      String
    image_url  String?
    image_id   String?
    notes      String?  @db.LongText
    time_limit String   @default("7200")
    userId     Int
    user       User     @relation(fields: [userId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Event {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    id        String   @id @default(uuid())
    title     String
    timeStart DateTime
    timeEnd   DateTime
    allDay    Boolean  @default(false)
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
}

model Quiz {
    id              String     @id @default(cuid())
    title           String
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    posted          Boolean    @default(false)
    date_submission DateTime   @default(now())
    time_duration   String     @default("now")
    isSubmitted     Boolean    @default(false)
    question        Question[]
    answer          Answer[]
    userId          Int
    user            User       @relation(fields: [userId], references: [id])
    choice          Choice[]
    score           Int @default(0)
}

model Question {
    id                  String              @id @default(cuid())
    question            String
    objective_test_type objective_test_type
    // question_number     Int
    dedicated_answer    String
    quiz_id             String
    quiz                Quiz                @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
    userId              Int
    user                User                @relation(fields: [userId], references: [id]) // not necessary but i might use this
    answer              Answer[]
    choice              Choice[]
}

model Choice {
    id              String   @id @default(cuid())
    choice          String
    quiz_id         String
    quiz            Quiz     @relation(fields: [quiz_id], references: [id])
    questionaire_id String
    question        Question @relation(fields: [questionaire_id], references: [id], onDelete: Cascade)
}

model Answer {
    id          String   @id @default(cuid())
    answer      String
    quiz_id     String
    quiz        Quiz     @relation(fields: [quiz_id], references: [id])
    question_id String
    question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
    userId      Int
    user        User     @relation(fields: [userId], references: [id])
}

enum objective_test_type {
    MULTIPLE_CHOICES
    ENUMERATION
    TRUE_OR_FALSE
}
